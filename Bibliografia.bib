%% This BibTeX bibliography file was created using BibDesk.
%% http://bibdesk.sourceforge.net/


%% Created for Lauro Cesar Araujo at 2015-04-27 19:43:45 -0300 


%% Saved with string encoding Unicode (UTF-8) 

@article{WASEEM2020110798,
  title    = {A Systematic Mapping Study on Microservices Architecture in DevOps},
  journal  = {Journal of Systems and Software},
  volume   = {170},
  pages    = {110798},
  year     = {2020},
  issn     = {0164-1212},
  doi      = {https://doi.org/10.1016/j.jss.2020.110798},
  url      = {https://www.sciencedirect.com/science/article/pii/S0164121220302053},
  author   = {Muhammad Waseem and Peng Liang and Mojtaba Shahin},
  keywords = {Microservices Architecture, DevOps, Systematic Mapping Study},
  abstract = {Context:
              Applying Microservices Architecture (MSA) in DevOps has received significant attention in recent years. However, there exists no comprehensive review of the state of research on this topic.
              Objective:
              This work aims to systematically identify, analyze, and classify the literature on MSA in DevOps.
              Methods:
              A Systematic Mapping Study (SMS) has been conducted on the literature published between January 2009 and July 2018.
              Results:
              Forty-seven studies were finally selected and the key results are: (1) Three themes on the research on MSA in DevOps are “microservices development and operations in DevOps”, “approaches and tool support for MSA based systems in DevOps”, and “MSA migration experiences in DevOps”. (2) 24 problems with their solutions regarding implementing MSA in DevOps are identified. (3) MSA is mainly described by using boxes and lines. (4) Most of the quality attributes are positively affected when employing MSA in DevOps. (5) 50 tools that support building MSA based systems in DevOps are collected. (6) The combination of MSA and DevOps has been applied in a wide range of application domains.
              Conclusion:
              The results and findings will benefit researchers and practitioners to conduct further research and bring more dedicated solutions for the issues of MSA in DevOps.}
}

@book{Familiar2015,
  author    = {Familiar, Bob},
  title     = {Microservices, IoT, and Azure: Leveraging DevOps and Microservice Architecture to Deliver SaaS Solutions},
  year      = {2015},
  publisher = {Apress},
  address   = {Berkeley, CA},
  isbn      = {978-1-4842-1275-2},
  url       = {https://link.springer.com/book/10.1007/978-1-4842-1275-2}
}

@misc{martin-fowler-microservice-prereq,
  author        = {Martin Fowler},
  date-added    = {2014-08-28 21:39:21 +0000},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Microservice Prerequisites},
  url           = {https://martinfowler.com/bliki/MicroservicePrerequisites.html},
  urlaccessdate = {06 Oct 2022},
  abstract      = {There are certain things you need to get sorted out before you can put your first microservices system into production: monitoring, provisioning, and a devops culture.},
  urldate       = {2022-10-07},
  journal       = {martinfowler.com},
  year          = {2014}
}

@inproceedings{CAOPLE,
  title      = {{CAOPLE}: {A} {Programming} {Language} for {Microservices} {SaaS}},
  shorttitle = {{CAOPLE}},
  doi        = {10.1109/SOSE.2016.46},
  abstract   = {The microservices architecture is widely regarded as a promising approach to service-oriented systems. However, developing applications in the microservices architecture presents three main challenges: (a) how to program systems that consists of a large number of services running in parallel and distributed over a cluster of computers, (b) how to reduce the communication overhead caused by executing a large number of small services, (c) how to support the flexible deployment of services to a network to achieve system load balance. This paper presents a programming language called CAOPLE and reports the implementation of the language on a virtual machine called CAVM-2. The paper demonstrates how this approach meets these challenges.},
  booktitle  = {2016 {IEEE} {Symposium} on {Service}-{Oriented} {System} {Engineering} ({SOSE})},
  author     = {Xu, Chengzhi and Zhu, Hong and Bayley, Ian and Lightfoot, David and Green, Mark and Marshall, Peter},
  month      = {Mar},
  year       = {2016},
  keywords   = {Containers, Computer languages, Computer architecture, Virtual machining, Servers, Software as a service, Runtime, Service-oriented software, Microservices architecture, Virtual machine, Programming languages, Cloud computing, Parallel programming model, Agent orientation},
  pages      = {34--43}
}

@misc{middleware-microservices,
  title      = {What are {Microservices}? {How} {Microservices} architecture works},
  author     = {{Middleware Lab}},
  shorttitle = {What are {Microservices}?},
  url        = {https://middleware.io/blog/microservices-architecture/},
  abstract   = {Microservices are an architectural style that builds cloud applications. Learn more about microservices, how they work, their benefits, and applications.},
  language   = {en},
  urldate    = {2022-10-20},
  journal    = {Middleware},
  year       = {2021},
  month      = {Set},
  publisher  = {{Middleware Lab}}
}

@inproceedings{PahlClaus2018APfM,
  title     = {Architectural Patterns for Microservices: A Systematic Mapping Study},
  abstract  = {Microservices is an architectural style increasing in popularity. However, there is still a lack of understanding how to adopt a microservice-based architectural style.
               We aim at characterizing different microservice architectural style patterns and the principles that guide their definition.
               We conducted a systematic mapping study in order to identify reported usage of microservices and based on these use cases extract common patterns and principles.
               We present two key contributions.
               Firstly, we identified several agreed microservice architecture patterns that seem widely adopted and reported in the case studies identified.
               Secondly, we presented these as a catalogue in a common template format including a summary of the advantages, disadvantages, and lessons learned for each pattern from the case studies.
               We can conclude that different architecture patterns emerge for different migration, orchestration, storage and deployment settings for a set of agreed principles.},
  address   = {Setúbal},
  author    = {Taibi, D and Lenarduzzi, V and Pahl, Claus},
  isbn      = {9789897582950},
  journal   = {CLOSER 2018: Proceedings of the 8th International Conference on Cloud Computing and Services Science; Funchal, Madeira, Portugal, 19-21 March 2018},
  language  = {eng},
  publisher = {SCITEPRESS},
  year      = {2018}
}

@misc{oracle_microservices,
  type      = {topic},
  author    = {{Oracle Corporation}},
  publisher = {{Oracle Corporation}},
  title     = {Learn about architecting microservices-based applications on Oracle Cloud},
  url       = {https://docs.oracle.com/pt-br/solutions/learn-architect-microservice},
  abstract  = {Se você quiser projetar um aplicativo que seja multilíngue, facilmente escalável, fácil de manter e implantar, altamente disponível e que minimize falhas, use a arquitetura de microsserviços para projetar e implantar um aplicativo em nuvem.},
  language  = {en-US},
  urldate   = {2022-10-21},
  journal   = {F12014-05},
  year      = {2021},
  month     = {Jun}
}

@misc{12factor,
  type          = {topic},
  author        = {Adam Wiggins},
  title         = {The Twelve-Factor App},
  url           = {https://12factor.net/},
  abstract      = {In the modern era, software is commonly delivered as a service: called web apps, or software-as-a-service. The twelve-factor app is a methodology for building software-as-a-service apps},
  language      = {en-US},
  urldate       = {2022-10-21},
  urlaccessdate = {21 Oct 2022},
  year          = {2017}
}

@misc{rapidAPI-twitter,
  type          = {Mídia Social},
  author        = {{RapidAPI}},
  url           = {https://twitter.com/Rapid_API},
  language      = {en-US},
  urldate       = {2022-10-21},
  urlaccessdate = {25 Oct 2022},
  year          = {2022}
}

@article{ZUO2020102878,
  title    = {An API gateway design strategy optimized for persistence and coupling},
  journal  = {Advances in Engineering Software},
  volume   = {148},
  pages    = {102878},
  year     = {2020},
  issn     = {0965-9978},
  doi      = {https://doi.org/10.1016/j.advengsoft.2020.102878},
  url      = {https://www.sciencedirect.com/science/article/pii/S0965997820304452},
  author   = {Xianyu Zuo and Yuehan Su and Qianqian Wang and Yi Xie},
  keywords = {API gateway, Microservices, RPC, Coupling degree, Persistence},
  abstract = {Microservices play a more and more important role in software development nowadays. Almost every programming language has its own microservices development framework. The characteristics of microservices make microservices have cross-platform compatibility issues and inconsistent call standards issues in the process of development and call microservices. The birth of API Gateway alleviates these problems to some extent. For small and medium-sized enterprises using today's popular API Gateways, it is difficult for them to get a balance between cost, performance and maintainability. This paper proposes a scheme to optimize the API Gateway. Firstly, the framework of API Gateway is optimized. Next, the coupling degree of API Gateway is optimized by reducing the coupling degree of core services and extended functions. In this way, the optimized Gateway can adapt to the plug-in mode, improve the user experience and reduce development costs. Then, the persistent design of the configuration information of the API Gateway is carried out, and the read-write optimization is carried out so that the optimized API Gateway not only has advantages in the configuration persistence, but also has further improved the I/O performance. Based on the optimized design, this paper implements a cross platform compatible API Gateway. Then it compares the performance of two popular API Gateway schemes through performance testing. The test results show that the optimized design of API Gateway achieves a new balance among cost, performance and maintainability. At the end of this paper, the work of this paper is summarized, and the next work is projected.}
}

@misc{GraphQL-site,
  title         = {{GraphQL} {\textbar} {A} query language for your {API}},
  type          = {Documentation},
  author        = {{The GraphQL Foundation}},
  url           = {https://graphql.org/},
  language      = {en-US},
  year          = {2018},
  urldate       = {2022-10-26},
  urlaccessdate = {26 Oct 2022},
  abstract      = {A query language for your API — GraphQL provides a complete description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.}
}

@techreport{rfc_http_nielsen_1999,
  type        = {Request for {Comments} (RFC)},
  title       = {Hypertext {Transfer} {Protocol} – {HTTP}/1.1},
  url         = {https://datatracker.ietf.org/doc/rfc2616/},
  abstract    = {HTTP has been in use by the World-Wide Web global information initiative since 1990. This specification defines the protocol referred to as "HTTP/1.1", and is an update to RFC 2068. [STANDARDS-TRACK]},
  number      = {RFC 2616},
  urldate     = {2022-10-28},
  institution = {Internet Engineering Task Force},
  author      = {Nielsen, Henrik and Mogul, Jeffrey and Masinter, Larry M. and Fielding, Roy T. and Gettys, Jim and Leach, Paul J. and Berners-Lee, Tim},
  month       = {Jun},
  year        = {1999}
}

@misc{wiki_software_versioning_2022,
  title     = {Software versioning},
  copyright = {Creative Commons Attribution-ShareAlike License},
  url       = {https://en.wikipedia.org/w/index.php?title=Software_versioning&oldid=1116804459},
  language  = {en},
  urldate   = {2022-10-29},
  journal   = {Wikipedia},
  month     = {Out},
  year      = {2022},
  note      = {Page Version ID: 1116804459}
}

@article{json_bourhis_2020,
  title      = {{JSON}: {Data} model and query languages},
  volume     = {89},
  issn       = {03064379},
  shorttitle = {{JSON}},
  url        = {https://linkinghub.elsevier.com/retrieve/pii/S0306437919305307},
  doi        = {10.1016/j.is.2019.101478},
  language   = {en},
  urldate    = {2022-10-31},
  journal    = {Information Systems},
  author     = {Bourhis, Pierre and Reutter, Juan L. and Vrgoč, Domagoj},
  month      = {Mar},
  year       = {2020},
  pages      = {101478}
}

@article{design-monitoring-testing-waseem,
  title    = {Design, monitoring, and testing of microservices systems: The practitioners’ perspective},
  journal  = {Journal of Systems and Software},
  volume   = {182},
  pages    = {111061},
  year     = {2021},
  issn     = {0164-1212},
  doi      = {https://doi.org/10.1016/j.jss.2021.111061},
  url      = {https://www.sciencedirect.com/science/article/pii/S0164121221001588},
  author   = {Muhammad Waseem and Peng Liang and Mojtaba Shahin and Amleto {Di Salle} and Gastón Márquez},
  keywords = {Microservices architecture, Design, Monitoring, Testing, Industrial survey},
  abstract = {Context:
              Microservices Architecture (MSA) has received significant attention in the software industry. However, little empirical evidence exists on design, monitoring, and testing of microservices systems.
              Objective:
              This research aims to gain a deep understanding of how microservices systems are designed, monitored, and tested in the industry.
              Methods:
              A mixed-methods study was conducted with 106 survey responses and 6 interviews from microservices practitioners.
              Results:
              The main findings are: (1) a combination of domain-driven design and business capability is the most used strategy to decompose an application into microservices, (2) over half of the participants used architecture evaluation and architecture implementation when designing microservices systems, (3) API gateway and Backend for frontend patterns are the most used MSA patterns, (4) resource usage and load balancing as monitoring metrics, log management and exception tracking as monitoring practices are widely used, (5) unit and end-to-end testing are the most used testing strategies, and (6) the complexity of microservices systems poses challenges for their design, monitoring, and testing, for which there are no dedicated solutions.
              Conclusions:
              Our findings reveal that more research is needed to (1) deal with microservices complexity at the design level, (2) handle security in microservices systems, and (3) address the monitoring and testing challenges through dedicated solutions.}
}

@misc{monolith-or-microservices,
  title      = {Microservices for {Startups}: {Should} you always start with a monolith?},
  shorttitle = {Microservices for {Startups}},
  url        = {https://buttercms.com/books/microservices-for-startups/should-you-always-start-with-a-monolith/},
  abstract   = {Conventional wisdoms says so but are there exceptions?},
  language   = {en},
  urldate    = {2022-11-02},
  author     = {Jake Lumetta},
  year       = {2018}
}

@misc{microsoft-api-gateway,
  title    = {The API gateway pattern versus the Direct client-to-microservice communication},
  url      = {https://learn.microsoft.com/en-us/dotnet/architecture/microservices/architect-microservice-container-applications/direct-client-to-microservice-communication-versus-the-api-gateway-pattern},
  language = {en},
  urldate  = {2022-11-04},
  author   = {{Microsoft Corporation}},
  year     = {2022},
  month    = {Set}
}

@misc{wiki_monolithic_2022,
  title     = {Monolithic application},
  copyright = {Creative Commons Attribution-ShareAlike License},
  url       = {https://en.wikipedia.org/w/index.php?title=Monolithic_application&oldid=1118196758},
  language  = {en},
  urldate   = {2022-11-05},
  journal   = {Wikipedia},
  month     = {Out},
  year      = {2022},
  note      = {Page Version ID: 1118196758}
}


@misc{microservicesIO_monolithic_architecture,
  title      = {Microservices {Pattern}: {Monolithic} {Architecture} pattern},
  shorttitle = {Microservices {Pattern}},
  url        = {http://microservices.io/patterns/monolithic.html},
  abstract   = {The monolithic architecture structures an application as a single deployable/executable component},
  urldate    = {2022-11-05},
  journal    = {microservices.io},
  year       = {2018},
  author     = {Chris Richardson}
}

@misc{microsoft-grpc,
  title    = {gRPC},
  url      = {https://learn.microsoft.com/pt-br/dotnet/architecture/cloud-native/grpc},
  language = {pt},
  urldate  = {2022-11-05},
  author   = {{Microsoft Corporation}},
  year     = {2022},
  month    = {Set}
}

@misc{martin-fowler-microservices,
  author        = {Martin Fowler and James Lewis},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Microservices},
  url           = {https://martinfowler.com/articles/microservices.html},
  urlaccessdate = {06 Nov 2022},
  abstract      = {The term "Microservice Architecture" has sprung up over the last few years to describe a particular way of designing software applications as suites of independently deployable services. While there is no precise definition of this architectural style, there are certain common characteristics around organization around business capability, automated deployment, intelligence in the endpoints, and decentralized control of languages and data. },
  urldate       = {2022-11-06},
  journal       = {martinfowler.com},
  year          = {2014}
}

@misc{12fatores-rita,
  author       = {Rita de Cássia Rodrigues},
  urldate      = {2022-11-06},
  year         = {2016},
  month        = {Out},
  url          = {https://www.fiap.com.br/2016/10/03/metodologia-12-fatores/},
  language     = {pt},
  urlacessdate = {06 Nov 2022},
  journal      = {fiap.com.br}
}

@misc{dontStartWithMonolith-tilkov,
  author        = {Stefan Tilkov},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Don't start with a monolith},
  url           = {https://martinfowler.com/articles/dont-start-monolith.html},
  urlaccessdate = {09 Nov 2022},
  urldate       = {2022-11-09},
  journal       = {martinfowler.com},
  year          = {2015}
}

@misc{martin-fowler-monolith-first,
  author        = {Martin Fowler},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Monolith first},
  url           = {https://martinfowler.com/bliki/MonolithFirst.html},
  urlaccessdate = {09 Nov 2022},
  abstract      = {As I hear stories about teams using a microservices architecture, I've noticed a common pattern. Almost all the successful microservice stories have started with a monolith that got too big and was broken up. Almost all the cases where I've heard of a system that was built as a microservice system from scratch, it has ended up in serious trouble. This pattern has led many of my colleagues to argue that you shouldn't start a new project with microservices, even if you're sure your application will be big enough to make it worthwhile. },
  urldate       = {2022-11-09},
  journal       = {martinfowler.com},
  year          = {2015}
}

@misc{top10-microservices-challenges,
  author        = {Mary Ann Richardson},
  title         = {Top 10 Challenges of Using Microservices for Managing Distributed Systems},
  url           = {https://www.spiceworks.com/tech/data-management/articles/top-10-challenges-of-using-microservices-for-managing-distributed-systems/},
  urlaccessdate = {10 Nov 2022},
  urldate       = {2022-11-10},
  journal       = {spiceworks.com},
  year          = {2021}
}

@misc{martin-fowler-continuous-integration,
  author        = {Martin Fowler},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Continuous Integration},
  url           = {https://martinfowler.com/articles/continuousIntegration.html},
  urlaccessdate = {12 Nov 2022},
  urldate       = {2022-11-12},
  journal       = {martinfowler.com},
  year          = {2006},
  language      = {en}
}

@misc{gitlab-ci-cd,
  author       = {{GitLab Incorporated}},
  howpublished = {GitLab Topics},
  title        = {What is CI/CD?},
  url          = {https://about.gitlab.com/topics/ci-cd/},
  urlacessdate = {12 Nov 2022},
  urldate      = {2022-11-12},
  journal      = {about.gitlab.com/topics},
  year         = {2022},
  language     = {en}
}

@misc{redhat-ci-cd,
  author       = {{Red Hat Incorporated}},
  howpublished = {Red Hat Topics},
  title        = {What is CI/CD?},
  url          = {https://www.redhat.com/en/topics/devops/what-is-ci-cd},
  urlacessdate = {12 Nov 2022},
  urldate      = {2022-11-12},
  journal      = {redhat.com/en/topics},
  year         = {2022},
  month        = {Abr},
  language     = {en}
}

@misc{harness-ci-cd,
  author       = {{Harness Incorporated}},
  howpublished = {Harness topics},
  title        = {Continuous Delivery vs. Continuous Deployment: What’s the Difference?},
  url          = {https://harness.io/blog/continuous-delivery-vs-continuous-deployment},
  urlacessdate = {12 Nov 2022},
  urldate      = {2022-11-12},
  journal      = {harness.io/blog},
  year         = {2021},
  month        = {Fev},
  language     = {en}
}

@misc{martin-fowler-continuous-delivery,
  author        = {Martin Fowler},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Continuous Delivery},
  url           = {https://martinfowler.com/bliki/ContinuousDelivery.html},
  urlaccessdate = {12 Nov 2022},
  urldate       = {2022-11-12},
  journal       = {martinfowler.com},
  year          = {2013},
  language      = {en}
}

@misc{martin-fowler-microservice-tradeoffs,
  author        = {Martin Fowler},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Microservice Tradeoffs},
  url           = {https://martinfowler.com/articles/microservice-trade-offs.html},
  urlaccessdate = {13 Nov 2022},
  urldate       = {2022-11-13},
  journal       = {martinfowler.com},
  year          = {2015},
  language      = {en}
}

@misc{google-protocol-buffers,
  title    = {Overview {\textbar} {Protocol} {Buffers}},
  url      = {https://developers.google.com/protocol-buffers/docs/overview},
  language = {en},
  urldate  = {2022-11-14},
  journal  = {Google Developers},
  author   = {{Google LLC}},
  year     = {2022},
  month    = {Jul}
}

@misc{amazon-filas-de-mensagens,
  title    = {Filas de mensagens},
  url      = {https://aws.amazon.com/pt/message-queue/},
  language = {pt},
  urldate  = {2022-11-14},
  journal  = {aws.amazon.com},
  author   = {{Amazon Web Services Incorporated}},
  year     = {2022}
}

@inproceedings{monorepo-polirepo-nicolas,
  author    = {Brousse, Nicolas},
  title     = {The Issue of Monorepo and Polyrepo in Large Enterprises},
  year      = {2019},
  isbn      = {9781450362573},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/3328433.3328435},
  doi       = {10.1145/3328433.3328435},
  abstract  = {Product and engineering teams' speed of producing high-quality results is critical to ensuring enterprise competitiveness. Additionally, one can observe an increase in IT systems complexity driven by the adoption of service-oriented architecture, micro-services, and serverless. Therefore, many large enterprises benefit from a mono-repository for source code management because of the improved team cognition that results from eroding barriers between teams and from influencing enhanced teamwork quality. This paper, first, reviews the characteristics of a multi-repositories structure, a mono-repository structure, and a hybrid model. Second, it discusses why some manage source code in a multi-repositories structure, either by choice or because of the organic evolution of large enterprises. Third, it reviews how mono-repositories in large teams, beyond the technical arguments, can drive high efficiency and enhanced product quality through improved team cognition.},
  booktitle = {Proceedings of the Conference Companion of the 3rd International Conference on Art, Science, and Engineering of Programming},
  articleno = {2},
  numpages  = {4},
  keywords  = {multi-repositories, devops, source code management, mono-repository, enterprise, programmer experience},
  location  = {Genova, Italy},
  series    = {Programming '19}
}

@misc{monorepo-polirepo-semaphoreci,
  title    = {Release Management for Microservices},
  url      = {https://semaphoreci.com/blog/release-management-microservices},
  language = {en},
  urldate  = {2022-11-14},
  journal  = {semaphoreci.com/blog/},
  author   = {Tomas Fernandez and Dan Ackerson},
  year     = {2022},
  month    = {Jul}
}

@misc{monorepo-do-or-do-not,
  title    = {Monorepos for Microservices Part 1: Do or do not?},
  url      = {https://danoncoding.com/monorepos-for-microservices-part-1-do-or-do-not-a7a9c90ad50e},
  language = {en},
  urldate  = {2022-11-14},
  journal  = {danoncoding.com},
  author   = {Dan Siwiec},
  year     = {2021},
  month    = {Fev}
}

@misc{gitlab-devops,
  author       = {{GitLab Incorporated}},
  howpublished = {GitLab Topics},
  title        = {What is DevOps?},
  url          = {https://about.gitlab.com/topics/devops/},
  urlacessdate = {14 Nov 2022},
  urldate      = {2022-11-14},
  journal      = {about.gitlab.com/topics},
  year         = {2022},
  language     = {en},
  month        = {Mai}
}

% TCC 2 %
% https://www.bibtex.com/format/templates/
% https://www.overleaf.com/learn/latex/Bibliography_management_with_bibtex
@book{Tanembaum-Steen,
  author    = {M. van Steen and A.S. Tanenbaum},
  title     = {Distributed {Systems}},
  edition   = {4},
  url       = {https://www.distributed-systems.net/index.php/books/ds4/},
  address   = {Erscheinungsort nicht ermittelbar},
  year      = {2023},
  publisher = {Maarten van Steen},
  isbn      = {978-90-815406-4-3},
  language  = {en}
}

@book{continuous-delivery-jez-humble,
  address    = {Upper Saddle River, NJ},
  title      = {Continuous delivery: reliable software releases through build, test, and deployment automation},
  isbn       = {9780321601919},
  shorttitle = {Continuous delivery},
  publisher  = {Addison-Wesley},
  author     = {Humble, Jez and Farley, David},
  year       = {2010},
  keywords   = {Computer software, Development, Computer software, Reliability, Computer software, Testing}
}

@misc{martin-fowler-frequency,
  author        = {Martin Fowler},
  date-added    = {2014-08-28 21:39:21 +0000},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Frequency Reduces Difficulty},
  url           = {https://martinfowler.com/bliki/FrequencyReducesDifficulty.html},
  urlaccessdate = {24 Feb 2025},
  urldate       = {2022-10-07},
  journal       = {martinfowler.com},
  year          = {2011}
}

@inbook{livro-sre-google,
  title      = {Site Reliability Engineering: How Google Runs Production Systems},
  shorttitle = {Site reliability engineering},
  edition    = {1},
  author     = {Beyer, B. and Jones, C. and Petoff, J. and Murphy, N.R.},
  isbn       = {9781491929124},
  lccn       = {2017304248},
  language   = {eng},
  publisher  = {O'Reilly Media},
  year       = {2016},
  url        = {https://sre.google/sre-book/monitoring-distributed-systems/},
  chapter    = {6}
}

@misc{grafana-blog,
  title   = {The RED Method: How to Instrument Your Services},
  url     = {https://grafana.com/blog/2018/08/02/the-red-method-how-to-instrument-your-services/},
  journal = {Grafana Labs},
  author  = {Dam, Julie},
  year    = {2018},
  month   = {Aug}
}

@inbook{livro-sre-google-workbook,
  title     = {The Site Reliability Workbook: Practical Ways to Implement SRE},
  author    = {Beyer, B. and Murphy, N.R. and Rensin, D.K. and Kawahara, K. and Thorne, S.},
  isbn      = {9781492029458},
  url       = {https://sre.google/workbook/monitoring/},
  year      = {2018},
  publisher = {O'Reilly Media},
  chapter   = {4}
}

@misc{grafana-loki,
  title        = {Loki overview | Grafana Loki documentation},
  url          = {https://grafana.com/docs/loki/latest/get-started/overview/},
  journal      = {Grafana Labs},
  language     = {en},
  author       = {{Grafana Labs}},
  urlacessdate = {12 Mar 2025},
  urldate      = {12 Mar 2025},
  year         = {2025}
}

@misc{prometheus-docs,
  title        = {Overview | What is Prometheus},
  url          = {https://prometheus.io/docs/introduction/overview/},
  journal      = {Prometheus.io},
  language     = {en},
  author       = {{Prometheus}},
  urlacessdate = {12 Mar 2025},
  urldate      = {12 Mar 2025},
  year         = {2025}
}

@book{livro-building-microservices,
  address    = {Sebastopol, Ca},
  edition    = {2},
  title      = {Building Microservices: Designing Fine-Grained Systems},
  shorttitle = {Building Microservices},
  isbn       = {9781492034025},
  publisher  = {O'reilly Media},
  author     = {Newman, Sam},
  year       = {2021}
}

@misc{service-discovery-baeldung,
  title   = {Service Discovery in Microservices},
  url     = {https://www.baeldung.com/cs/service-discovery-microservices},
  journal = {Baeldung on Computer Science},
  author  = {Cusimano, Simone},
  editor  = {Piwowarek , Grzegorz},
  year    = {2022},
  month   = {Jan}
}

@misc{teorema-cap-ibm,
  title   = {CAP Theorem},
  url     = {https://www.ibm.com/think/topics/cap-theorem},
  journal = {Ibm.com},
  author  = {IBM},
  year    = {2022},
  month   = {Dec}
}

@misc{blog-devops,
  title   = {The Eight Phases of a DevOps Pipeline},
  url     = {https://medium.com/taptuit/the-eight-phases-of-a-devops-pipeline-fda53ec9bba},
  journal = {Medium},
  author  = {Pennington, Jakob},
  year    = {2020},
  month   = {Jul}
}

@misc{consumer-driven-contracts,
  author        = {Ian Robinson},
  date-added    = {2006-06-12},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Consumer-Driven Contracts: A Service Evolution Pattern},
  url           = {https://martinfowler.com/articles/consumerDrivenContracts.html},
  urlaccessdate = {14 Mar 2025},
  journal       = {martinfowler.com},
  year          = {2006},
  month         = {Jun}
}

@misc{rfc-json-web-token,
  series       = {Request for Comments},
  number       = 7519,
  howpublished = {RFC 7519},
  publisher    = {RFC Editor},
  doi          = {10.17487/RFC7519},
  url          = {https://www.rfc-editor.org/info/rfc7519},
  author       = {Michael B. Jones and John Bradley and Nat Sakimura},
  title        = {{JSON Web Token (JWT)}},
  pagetotal    = 30,
  year         = 2015,
  month        = may,
  abstract     = {JSON Web Token (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties. The claims in a JWT are encoded as a JSON object that is used as the payload of a JSON Web Signature (JWS) structure or as the plaintext of a JSON Web Encryption (JWE) structure, enabling the claims to be digitally signed or integrity protected with a Message Authentication Code (MAC) and/or encrypted.}
}

@misc{grpc,
  author       = {{gRPC Authors}},
  title        = {What is gRPC? | Core concepts, architecture and lifecycle},
  journal      = {gRPC.io},
  year         = {2025},
  url          = {https://grpc.io/docs/what-is-grpc/core-concepts/},
  urlacessdate = {19 Mar 2025}
}

@misc{springboot,
  title        = {Spring Boot},
  url          = {https://spring.io/projects/spring-boot},
  journal      = {spring documentation},
  author       = {{VMware Tanzu}},
  year         = {2025},
  urlacessdate = {14 Mar 2025}
}

@misc{flask,
  author       = {Pallets},
  journal      = {flask documentation},
  title        = {Flask},
  year         = {2025},
  url          = {https://flask.palletsprojects.com/en/2.0.x/},
  urlacessdate = {14 Mar 2025}
}

@misc{django,
  author       = {{Django Software Foundation}},
  title        = {Django},
  journal      = {django documentation},
  year         = {2025},
  url          = {https://www.djangoproject.com/},
  urlacessdate = {14 Mar 2025}
}

@misc{golang,
  author       = {{Go Team}},
  title        = {Go Programming Language},
  journal      = {golang documentation},
  year         = {2025},
  url          = {https://golang.org/},
  urlacessdate = {14 Mar 2025}
}

@misc{nodejs,
  author        = {{OpenJS Foundation}},
  title         = {Node.js},
  journal       = {nodejs documentation},
  year          = {2025},
  url           = {https://nodejs.org/en/docs/},
  urlaccessdate = {14 Mar 2025}
}

@misc{expressjs,
  author        = {{OpenJS Foundation}},
  title         = {Express.js},
  journal       = {express documentation},
  year          = {2025},
  url           = {https://expressjs.com/},
  urlaccessdate = {14 Mar 2025}
}

@misc{aspnetcore,
  author        = {{Microsoft Corporation}},
  title         = {ASP.NET Core},
  year          = {2025},
  url           = {https://dotnet.microsoft.com/en-us/apps/aspnet},
  urlaccessdate = {14 Mar 2025}
}

@misc{dotnetcore,
  author        = {{Microsoft Corporation}},
  title         = {Microsoft .NET},
  year          = {2025},
  url           = {https://dotnet.microsoft.com/en-us/learn/dotnet/what-is-dotnet},
  urlaccessdate = {14 Mar 2025}
}

 @book{livro-ddd,
  address   = {Boston, Mass. ; Munich},
  title     = {Domain-driven Design : Tackling Complexity in the Heart of Software},
  isbn      = {9780321125217},
  publisher = {Addison-Wesley},
  author    = {Evans, Eric},
  year      = {2003},
  edition   = {1}
}

@misc{martin-fowler-bluegreen,
  author        = {Martin Fowler},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Blue Green Deployment},
  url           = {https://martinfowler.com/bliki/BlueGreenDeployment.html},
  urlaccessdate = {15 Mar 2025},
  journal       = {martinfowler.com},
  year          = {2010}
}

@misc{canary-release,
  author        = {Danilo Sato},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Canary Release},
  url           = {https://martinfowler.com/bliki/CanaryRelease.html},
  urlaccessdate = {15 Mar 2025},
  journal       = {martinfowler.com},
  year          = {2014}
}

@misc{feature-toggles,
  author        = {Pete Hodgson},
  howpublished  = {Blog do Martin Fowler},
  keywords      = {blog},
  title         = {Feature Toggles (aka Feature Flags)},
  url           = {https://martinfowler.com/articles/feature-toggles.html},
  urlaccessdate = {15 Mar 2025},
  journal       = {martinfowler.com},
  year          = {2017}
}

@misc{nginx,
  author        = {{F5 Incorporated}},
  title         = {Beginner’s Guide},
  year          = {2025},
  url           = {https://nginx.org/en/docs/beginners_guide.html},
  urlaccessdate = {15 Mar 2025}
}

@misc{nginx-vs-apache,
  author        = {Alex Garnett and Justin Ellingwood},
  title         = {Apache vs Nginx: Practical Considerations},
  year          = {2022},
  url           = {https://www.digitalocean.com/community/tutorials/apache-vs-nginx-practical-considerations},
  urlaccessdate = {15 Mar 2025}
}

@misc{api-design-restfulapi,
  author        = {Lokesh Gupta},
  title         = {RESTful web API design},
  year          = {2024},
  url           = {https://restfulapi.net/rest-api-best-practices/},
  urlaccessdate = {16 Mar 2025}
}

@misc{ibm-choosing-database,
  title   = {Choosing the Right Databases for Microservices},
  url     = {https://www.ibm.com/think/insights/choosing-the-right-databases-for-microservices},
  journal = {Ibm.com},
  author  = {Brown, Kyle},
  year    = {2020},
  month   = {Jun}
}

@misc{mongodb-sql-nosql,
  title   = {NoSQL Vs SQL Databases},
  url     = {https://www.mongodb.com/resources/basics/databases/nosql-explained/nosql-vs-sql},
  journal = {MongoDB.com},
  author  = {{MongoDB}},
  year    = {2024}
}

@misc{redis,
  title   = {Get Started with Redis Community Edition},
  url     = {https://redis.io/docs/latest/get-started/},
  journal = {redis.io},
  author  = {Redis},
  year    = {2025}
}

@misc{memcached,
  title   = {About Memcached},
  url     = {https://www.memcached.org/about},
  journal = {Memcached.org},
  author  = {Dormando},
  year    = {2018}
}

@misc{graylog,
  title   = {What Is Graylog},
  url     = {https://go2docs.graylog.org/current/what_is_graylog/what_is_graylog.htm},
  journal = {Graylog.org},
  author  = {{Graylog Incorporated}},
  year    = {2025}
}

@misc{kubernetes,
  title   = {Kubernetes | Overview},
  url     = {https://kubernetes.io/docs/concepts/overview/#why-you-need-kubernetes-and-what-can-it-do},
  journal = {Kubernetes.io},
  author  = {{The Kubernetes Authors}},
  year    = {2024},
  month   = {Sep}
}

@misc{lxc-vs-docker,
  title   = {Linux Containers vs. Docker: Which One Should You Use?},
  url     = {https://www.docker.com/blog/lxc-vs-docker/},
  journal = {Docker},
  author  = {Perlow, Jason},
  year    = {2024},
  month   = {Jun}
}

@misc{podman-vs-docker,
  title   = {Podman Vs Docker: a Comprehensive Comparison},
  url     = {https://medium.com/@supportfly/podman-vs-docker-a-comprehensive-comparison-77b1b41e67e0},
  journal = {Medium},
  author  = {SupportFly},
  year    = {2024},
  month   = {Feb}
}

@misc{jaeger,
  title   = {Jaeger | Features},
  url     = {https://www.jaegertracing.io/docs/1.22/features/},
  journal = {Jaeger: Open source, Distributed Tracing Platform},
  author  = {{The Jaeger Authors}},
  year    = {2025}
}

@misc{apache-kafka,
  title   = {Kafka 2.0 Documentation},
  url     = {https://kafka.apache.org/20/documentation.html},
  journal = {Apache Kafka Documentation},
  author  = {{Apache Software Foundation}},
  year    = {2024}
}

@book{relacionados-micronaut,
  title     = {Building Microservices with Micronaut®},
  isbn      = {9781800567399},
  publisher = {Packt Publishing Ltd},
  author    = {Singh, Nirmal and Dawood, Zack and {The Micronaut® Foundation}},
  year      = {2021},
  month     = {Sep}
}

@book{relacionados-ms-patterns,
  address   = {Shelter Island, New York},
  title     = {Microservices Patterns: with Examples in Java},
  isbn      = {9781617294549},
  publisher = {Manning Publications},
  author    = {Richardson, Chris},
  year      = {2019}
}

@book{relacionados-asp-net,
  title     = {Building Microservices with ASP.NET Core},
  isbn      = {9781491961681},
  publisher = {“O'Reilly Media, Inc.”},
  author    = {Hoffman, Kevin},
  year      = {2017},
  month     = {Aug}
}

@book{relacionados-event-driven,
  title     = {Building Event-Driven Microservices},
  isbn      = {9781492057840},
  publisher = {“O'Reilly Media, Inc.”},
  author    = {Bellemare, Adam},
  year      = {2020},
  month     = {Jul}
}

@article{relacionados-pains-and-gains,
  title   = {The Pains and Gains of microservices: a Systematic Grey Literature Review},
  doi     = {https://doi.org/10.1016/j.jss.2018.09.082},
  journal = {Journal of Systems and Software},
  author  = {Soldani, Jacopo and Tamburri, Damian Andrew and Van Den Heuvel, Willem-Jan},
  year    = {2018},
  month   = {Dec}
}

@article{relacionados-how-evolve,
  title   = {How Do Microservices evolve? an Empirical Analysis of Changes in open-source Microservice Repositories},
  volume  = {204},
  url     = {https://www.sciencedirect.com/science/article/pii/S0164121223001838},
  doi     = {https://doi.org/10.1016/j.jss.2023.111788},
  journal = {Journal of Systems and Software},
  author  = {Assunção, Wesley K. G. and Krüger, Jacob and Mosser, Sébastien and Selaoui, Sofiane},
  year    = {2023},
  month   = {Oct}
}

@book{relacionados-decoding-microservices,
  title     = {The Art of Decoding Microservices},
  isbn      = {9798868812675},
  publisher = {Springer Nature},
  author    = {Bhatnagar, Sumit},
  year      = {2025}
}

@misc{graphql_redhat,
  title   = {GraphQL},
  url     = {https://www.redhat.com/pt-br/topics/api/what-is-graphql},
  journal = {www.redhat.com},
  author  = {{Red Hat Incorporated}},
  year    = {2023},
  month   = {Feb}
}

@phdthesis{rest_protocol,
  author    = {Fielding, Roy Thomas and Taylor, Richard N.},
  title     = {Architectural styles and the design of network-based software architectures},
  year      = {2000},
  isbn      = {0599871180},
  publisher = {University of California, Irvine},
  note      = {AAI9980887},
  url       = {https://ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm},
  chapter   = {5}
}

@misc{quarkus_redhat,
  title         = {What is Quarkus?},
  url           = {https://quarkus.io/about/},
  journal       = {www.redhat.io},
  author        = {{Red Hat Incorporated}},
  year          = {2025},
  month         = {Abril},
  urlaccessdate = {10 Apr 2025}
}

@misc{fastapi,
  title   = {FastAPI framework, High performance, Easy to learn, Fast to code, Ready for Production},
  url     = {https://fastapi.tiangolo.com/},
  journal = {fastapi.tiangolo.com},
  author  = {FastAPI},
  year    = {2023},
  urlaccessdate = {10 Apr 2025}
}
% The type field is used to store more descriptive name of the type of work. E.g. for a techreport entry it can be "Government Report", while for the phdthesis type it can be a PhD dissertation.
% type = "Government Report"
% type = "White Paper"
% type = "Bachelor thesis"
% type = "{PhD} dissertation"