\citeonline{WASEEM2020110798} diz que ...
[...] \cite{WASEEM2020110798}

\textit{testeteste}
\emph{123 teste teste}

- pode usar a imagem do mapeamento de problemas e soluções no anexo? sim, citação comum
imagem
fonte: ()


Separar em
1- introduçao
2- fundamentacao
3- padrões
4- soluçoes

- tem que explicar em algum lugar as palavras que eu deixar em ingles? por exemplo pipeline - fluxo? usar um parentese mesmo

- procurar uma outra referência sobre começar primeiro com o monolito e não com microserviços.

Escolher alguns tópicos para se aprofundar?
Enumerar os problemas, e aprofundar melhor em alguns?
Abordar em maior profundidade (opções):
- infra como código
- observabilidade (monitoramento)
- testes
- ci/cd

- como citar parágrafos seguidos? cita em cada ou pode ser apenas no ultimo?

- falar sobre REST?
- melhorar introdução .. falar sobre?
- adicionar mais trabalhos relacionados?
- usar imagem do eShopOnContainers?
- ler o resto do artigo 'microservices' de martin fowler (infrastructure automation)

- 4.7 monorepo ou multirepo
- soluções: cd





TCC 2 <<<<<<


Propor uma combinação de ferramentas:
    Linguagens/Framework:?
        JS: Node - ExpressJS, 
        Python: PyMS, Nameko, Django
        C#: Dotnet
    Mensageria:?
        Apache Kafka
        RabbitMQ
    Banco de Dados:?
        MySQL*, PostgreSQL*, MongoDB*, Couchbase*, Redis*, Amazon DynamoDB
    Controle de versão:
        Git
    Gerenciamento de repositórios:
        GitHub
    Organização de código:
        Monorepo

TO DO:
    Decidir qual framework usar: Node? Dotnet? (Procurar um tutorial?)

    Programar o código pra cada funcionalidade do site, e separar em (micro)serviços

    Fazer a comunicação entre os serviços

    Aplicar as práticas estudadas



"Here’s some other lessons we’ve learned along the way:

    Networking/debugging now becomes a PITA.

    Try to separate microservices by the business domain they cover and have one service handle one action completely (I.E, signing up a new user). If you start having to reach out to several services for one action, you’re going down a dark path with a lot of failure points.

    Using something like Apache Kafka as an event source that is central source of truth in your system. You are eventually going to have failures which will cause discrepancies in your data. You need someplace to go to rebuild a service when that happens.

    Copying data is okay. Every service should be able to query its own materialized view of the global data in its own database. This means that some pieces of data (I.E., user data) might be saved in a lot of places which may lead to different results from different services.

    “No service should know anything about the other” is a hard concept to grasp. This tripped us up in the beginning as we were trying to follow this mantra too closely. It should read “no service should know about the internal workings of another.” We found though that exposing a global REST API that’s a conglomerate of an individual REST APIs per service is a good practice for command based actions that require validation.

    Change data capture is your friend for events."
    https://www.reddit.com/r/node/comments/106qfbb/first_time_building_microservicebased_application/
